package com.huacainfo.ace.fop.web.controller;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;
import com.huacainfo.ace.common.model.PageParamNoChangeSord;
import com.huacainfo.ace.common.result.MessageResponse;
import com.huacainfo.ace.common.result.PageResult;
import com.huacainfo.ace.common.result.SingleResult;
import com.huacainfo.ace.fop.model.$!{bean.name};
import com.huacainfo.ace.fop.service.$!{bean.name}Service;
import com.huacainfo.ace.fop.vo.$!{bean.name}Vo;
import com.huacainfo.ace.fop.vo.$!{bean.name}QVo;

@Controller
@RequestMapping("/$!{bean.lowerName}")
/**
* @author: $!{annotation.authorName}
* @version: $!{annotation.version}
* @Description:  TODO($!{bean.tableChineseName})
*/
public class $!{bean.name}Controller extends FopBaseController {


private static final long serialVersionUID = 1L;
Logger logger = LoggerFactory.getLogger(this.getClass());
@Autowired
private $!{bean.name}Service $!{bean.lowerName}Service;
/**
*
* @Title:find!{bean.name}List
* @Description:  TODO($!{bean.tableChineseName}分页查询)
* @param:        @param condition
* @param:        @param page
* @param:        @return
* @param:        @throws Exception
* @return:       PageResult
<$!{bean.name}Vo>
    * @throws
    * @author: $!{annotation.authorName}
    * @version: $!{annotation.version}
    */
    @RequestMapping(value = "/find$!{bean.name}List")
    @ResponseBody
    public PageResult
    <$!{bean.name}Vo> find$!{bean.name}List($!{bean.name}QVo condition, PageParamNoChangeSord page) throws Exception {
        PageResult
        <$!{bean.name}Vo> rst = this.$!{bean.lowerName}Service
            .find$!{bean.name}List(condition, page.getStart(), page.getLimit(), page.getOrderBy());
            if (rst.getTotal() == 0) {
            rst.setTotal(page.getTotalRecord());
            }

            return rst;
            }

            /**
            *
            * @Title:insert$!{bean.name}
            * @Description: TODO(添加$!{bean.tableChineseName})
            * @param: @param jsons
            * @param: @throws Exception
            * @return: MessageResponse
            * @throws
            * @author: $!{annotation.authorName}
            * @version: $!{annotation.version}
            */
            @RequestMapping(value = "/insert$!{bean.name}")
            @ResponseBody
            public MessageResponse insert$!{bean.name}(String jsons) throws Exception {
            $!{bean.name} obj = JSON.parseObject(jsons, $!{bean.name}.class);
            return this.$!{bean.lowerName}Service.insert$!{bean.name}(obj, this.getCurUserProp());
            }

            /**
            *
            * @Title:update$!{bean.name}
            * @Description: TODO(更新$!{bean.tableChineseName})
            * @param: @param jsons
            * @param: @throws Exception
            * @return: MessageResponse
            * @throws
            * @author: $!{annotation.authorName}
            * @version: $!{annotation.version}
            */
            @RequestMapping(value = "/update$!{bean.name}")
            @ResponseBody
            public MessageResponse update$!{bean.name}(String jsons) throws Exception {
            $!{bean.name} obj = JSON.parseObject(jsons, $!{bean.name}.class);
            return this.$!{bean.lowerName}Service.update$!{bean.name}(obj, this.getCurUserProp());
            }

            /**
            *
            * @Title:select$!{bean.name}ByPrimaryKey
            * @Description: TODO(获取$!{bean.tableChineseName})
            * @param: @param id
            * @param: @throws Exception
            * @return: SingleResult<$!{bean.name}>
            * @throws
            * @author: $!{annotation.authorName}
            * @version: $!{annotation.version}
            */
            @RequestMapping(value = "/select$!{bean.name}ByPrimaryKey")
            @ResponseBody
            public SingleResult
            <$!{bean.name}Vo> select$!{bean.name}ByPrimaryKey(String id)throws Exception {
                return this.$!{bean.lowerName}Service.select$!{bean.name}ByPrimaryKey(id);
                }
                /**
                *
                * @Title:delete$!{bean.name}By$!{bean.name}Id
                * @Description: TODO(删除$!{bean.tableChineseName})
                * @param: @param jsons
                * @param: @throws Exception
                * @return: MessageResponse
                * @throws
                * @author: $!{annotation.authorName}
                * @version: $!{annotation.version}
                */
                @RequestMapping(value = "/delete$!{bean.name}By$!{bean.name}Id")
                @ResponseBody
                public MessageResponse delete$!{bean.name}By$!{bean.name}Id(String jsons) throws Exception {
                JSONObject json = JSON.parseObject(jsons);
                String id = json.getString("id");
                return this.$!{bean.lowerName}Service.delete$!{bean.name}By$!{bean.name}Id(id, this.getCurUserProp());
                }
                }
