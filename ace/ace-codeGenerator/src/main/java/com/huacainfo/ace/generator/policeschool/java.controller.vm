package com.huacainfo.ace.policeschool.web.controller;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;
import com.huacainfo.ace.common.model.PageParamNoChangeSord;
import com.huacainfo.ace.common.result.MessageResponse;
import com.huacainfo.ace.common.result.PageResult;
import com.huacainfo.ace.common.result.SingleResult;
import com.huacainfo.ace.common.tools.ExcelUtils;
import com.huacainfo.ace.policeschool.model.$!{bean.name};
import com.huacainfo.ace.policeschool.service.$!{bean.name}Service;
import com.huacainfo.ace.policeschool.vo.$!{bean.name}Vo;
import com.huacainfo.ace.policeschool.vo.$!{bean.name}QVo;
import org.springframework.web.multipart.MultipartFile;
import com.huacainfo.ace.portal.vo.MongoFile;

import java.util.ArrayList;
import java.util.Map;
import java.util.List;
@Controller
@RequestMapping("/$!{bean.lowerName}")
/**
* @author: $!{annotation.authorName}
* @version: $!{annotation.version}
* @Description:  TODO($!{bean.tableChineseName})
*/
public class $!{bean.name}Controller extends BisBaseController {


private static final long serialVersionUID = 1L;
Logger logger = LoggerFactory.getLogger(this.getClass());
@Autowired
private $!{bean.name}Service $!{bean.lowerName}Service;

/**
*
* @Title:find!{bean.name}List
* @Description:  TODO($!{bean.tableChineseName}分页查询)
* @param:        @param condition
* @param:        @param page
* @param:        @return
* @param:        @throws Exception
* @return:       PageResult
<$!{bean.name}Vo>
    * @throws
    * @author: $!{annotation.authorName}
    * @version: $!{annotation.version}
    */
    @RequestMapping(value = "/find$!{bean.name}List")
    @ResponseBody
    public PageResult
    <$!{bean.name}Vo> find$!{bean.name}List($!{bean.name}QVo condition,PageParamNoChangeSord page) throws Exception {

        PageResult
        <$!{bean.name}Vo> rst = this.$!{bean.lowerName}Service.find$!{bean.name}List(condition, page.getStart(),
            page.getLimit(), page.getOrderBy());
            if (rst.getTotal() == 0) {
            rst.setTotal(page.getTotalRecord());
            }

            return rst;
            }

            /**
            *
            * @Title:insert$!{bean.name}
            * @Description: TODO(添加$!{bean.tableChineseName})
            * @param: @param jsons
            * @param: @throws Exception
            * @return: MessageResponse
            * @throws
            * @author: $!{annotation.authorName}
            * @version: $!{annotation.version}
            */
            @RequestMapping(value = "/insert$!{bean.name}")
            @ResponseBody
            public MessageResponse insert$!{bean.name}(String jsons) throws Exception {
            $!{bean.name} obj = JSON.parseObject(jsons, $!{bean.name}.class);
            return this.$!{bean.lowerName}Service.insert$!{bean.name}(obj, this.getCurUserProp());
            }

            /**
            *
            * @Title:update$!{bean.name}
            * @Description: TODO(更新$!{bean.tableChineseName})
            * @param: @param jsons
            * @param: @throws Exception
            * @return: MessageResponse
            * @throws
            * @author: $!{annotation.authorName}
            * @version: $!{annotation.version}
            */
            @RequestMapping(value = "/update$!{bean.name}")
            @ResponseBody
            public MessageResponse update$!{bean.name}(String jsons) throws Exception {
            $!{bean.name} obj = JSON.parseObject(jsons, $!{bean.name}.class);
            return this.$!{bean.lowerName}Service.update$!{bean.name}(obj, this.getCurUserProp());
            }

            /**
            *
            * @Title:select$!{bean.name}ByPrimaryKey
            * @Description: TODO(获取$!{bean.tableChineseName})
            * @param: @param id
            * @param: @throws Exception
            * @return: SingleResult<$!{bean.name}>
            * @throws
            * @author: $!{annotation.authorName}
            * @version: $!{annotation.version}
            */
            @RequestMapping(value = "/select$!{bean.name}ByPrimaryKey")
            @ResponseBody
            public SingleResult
            <$!{bean.name}Vo> select$!{bean.name}ByPrimaryKey(String id)throws Exception {
                return this.$!{bean.lowerName}Service.select$!{bean.name}ByPrimaryKey(id);
                }

                /**
                *
                * @Title:delete$!{bean.name}By$!{bean.name}Id
                * @Description: TODO(删除$!{bean.tableChineseName})
                * @param: @param jsons
                * @param: @throws Exception
                * @return: MessageResponse
                * @throws
                * @author: $!{annotation.authorName}
                * @version: $!{annotation.version}
                */
                @RequestMapping(value = "/delete$!{bean.name}By$!{bean.name}Id")
                @ResponseBody
                public MessageResponse delete$!{bean.name}By$!{bean.name}Id(String jsons) throws Exception {
                JSONObject json = JSON.parseObject(jsons);
                String id = json.getString("id");
                return this.$!{bean.lowerName}Service.delete$!{bean.name}By$!{bean.name}Id(id, this.getCurUserProp());
                }

                /**
                *
                * @Title:audit
                * @Description: TODO(审核$!{bean.tableChineseName})
                * @param: @param id bean.id
                * @param: @param rst 审核结果 3-通过 4-拒绝
                * @param: @param message 审核说明
                * @param: @throws Exception
                * @return: MessageResponse
                * @throws
                * @author: $!{annotation.authorName}
                * @version: $!{annotation.version}
                */
                @RequestMapping(value = "/audit")
                @ResponseBody
                public MessageResponse audit(String id,String rst, String message) throws Exception {

                return this.$!{bean.lowerName}Service.audit(id, rst, message, this.getCurUserProp());
                }


                /**
                *
                * @Title:importXls
                * @Description: TODO(导入!{bean.tableChineseName})
                * @param: @param file
                * @param: @param jsons
                * @param: @return
                * @param: @throws Exception
                * @return: MessageResponse
                * @throws
                * @author: $!{annotation.authorName}
                * @version:$!{annotation.version}
                */
                @RequestMapping(value = "/importXls")
                @ResponseBody
                public MessageResponse importXls(@RequestParam MultipartFile[] file,
                String jsons) throws Exception {
                ExcelUtils utils = new ExcelUtils();
                List
                <Map
                <String
                , Object>> list=new ArrayList<>();
                MongoFile[] files = new MongoFile[file.length];
                int i = 0;
                for (MultipartFile o : file) {
                MongoFile obj = new MongoFile();
                obj.setInputStream(o.getInputStream());
                obj.setFilename(o.getOriginalFilename());
                obj.setLength(o.getSize());
                files[i] = obj;
                i++;
                String ext = obj.getFilename().toLowerCase();
                ext = ext.substring(obj.getFilename().toLowerCase().lastIndexOf("."));
                this.logger.info(ext);
                if (ext.equals(".xls")) {
                list = utils.readExcelByJXL(obj.getInputStream(), 2);
                }
                if (ext.equals(".xlsx")) {
                list = utils.readExcelByPOI(obj.getInputStream(), 2);
                }
                }
                return this.$!{bean.lowerName}Service.importXls(list, this.getCurUserProp());
                }


                /**
                * @throws
                * @Title:audit
                * @Description: TODO(条件查询)
                * @param: @param p
                * @param: @throws Exception
                * @return: ListResult
                * @author: $!{annotation.authorName}
                * @version:$!{annotation.version}
                */
                @RequestMapping(value = "/getList")
                @ResponseBody
                public ListResult
                <Map
                <String
                ,Object>> getList() throws Exception {
                return this.$!{bean.lowerName}Service.getList(this.getParams());
                }


                /**
                * @throws
                * @Title:getListByCondition
                * @Description: TODO(用于控件数据获取)
                * @param: @param params
                * @param: @return
                * @return: Map
                <String
                ,Object>
                * @author: $!{annotation.authorName}
                * @version:$!{annotation.version}
                */
                @RequestMapping(value = "/getListByCondition")
                @ResponseBody
                public Map
                <String
                , Object> getListByCondition() {
                return this.$!{bean.lowerName}Service.getListByCondition(this.getParams());
                }


                /**
                * @throws
                * @Title:delete$!{bean.name}By$!{bean.name}Ids
                * @Description: TODO(批量删除$!{bean.tableChineseName})
                * @param: @param ids
                * @param: @throws Exception
                * @return: MessageResponse
                * @author: $!{annotation.authorName}
                * @version:$!{annotation.version}
                */
                @RequestMapping(value = "/delete$!{bean.name}By$!{bean.name}Ids")
                @ResponseBody
                public MessageResponse delete$!{bean.name}By$!{bean.name}Ids(String ids) throws Exception {
                String [] id=ids.split(",");
                return this.$!{bean.lowerName}Service.delete$!{bean.name}By$!{bean.name}Ids(id, this.getCurUserProp());
                }

                /**
                * @throws
                * @Title:updateStatus
                * @Description: TODO(更新状态)
                * @param: @param id
                * @param: @throws Exception
                * @return: MessageResponse
                * @author: $!{annotation.authorName}
                * @version:$!{annotation.version}
                */
                @RequestMapping(value = "/updateStatus")
                @ResponseBody
                public MessageResponse updateStatus(String id,String status) throws Exception {
                return this.$!{bean.lowerName}Service.updateStatus(id,status,this.getCurUserProp());
                }
                }
