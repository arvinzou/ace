<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.huacainfo.ace.partyschool.dao.AttRecordDao">
    <resultMap id="BaseResultMap" type="com.huacainfo.ace.partyschool.model.AttRecord">
        <id column="id" jdbcType="VARCHAR" property="id"/>
        <result column="userId" jdbcType="VARCHAR" property="userId"/>
        <result column="userType" jdbcType="VARCHAR" property="userType"/>
        <result column="attTime" jdbcType="TIMESTAMP" property="attTime"/>
        <result column="attState" jdbcType="VARCHAR" property="attState"/>
        <result column="attPhoto" jdbcType="VARCHAR" property="attPhoto"/>
        <result column="longitude" jdbcType="DECIMAL" property="longitude"/>
        <result column="latitude" jdbcType="DECIMAL" property="latitude"/>
        <result column="status" jdbcType="CHAR" property="status"/>
        <result column="remark" jdbcType="VARCHAR" property="remark"/>
        <result column="createDate" jdbcType="TIMESTAMP" property="createDate"/>
    </resultMap>
    <sql id="Base_Column_List">
    id, userId, userType, attTime, attState, attPhoto, longitude, latitude, status, remark, createDate
  </sql>
    <select id="selectByPrimaryKey" parameterType="java.lang.String" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from att_record
        where id = #{id,jdbcType=VARCHAR}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.String">
        delete from att_record
        where id = #{id,jdbcType=VARCHAR}
    </delete>
    <insert id="insert" parameterType="com.huacainfo.ace.partyschool.model.AttRecord">
    insert into att_record (id, userId, userType, attTime, attState,
      attPhoto, longitude, latitude, status, remark,  createDate)
    values (#{id,jdbcType=VARCHAR}, #{userId,jdbcType=VARCHAR}, #{userType,jdbcType=VARCHAR}, 
      #{attTime,jdbcType=TIMESTAMP}, #{attState,jdbcType=VARCHAR},
      #{attPhoto,jdbcType=VARCHAR}, #{longitude,jdbcType=DECIMAL},
      #{latitude,jdbcType=DECIMAL}, #{status,jdbcType=CHAR}, #{remark,jdbcType=VARCHAR}, 
      #{createDate,jdbcType=TIMESTAMP})
  </insert>

    <update id="updateByPrimaryKey" parameterType="com.huacainfo.ace.partyschool.model.AttRecord">
    update att_record
    set userId = #{userId,jdbcType=VARCHAR},
      userType = #{userType,jdbcType=VARCHAR},
      attTime = #{attTime,jdbcType=TIMESTAMP},
      attState = #{attState,jdbcType=VARCHAR},
      attPhoto = #{attPhoto,jdbcType=VARCHAR},
      longitude = #{longitude,jdbcType=DECIMAL},
      latitude = #{latitude,jdbcType=DECIMAL},
      status = #{status,jdbcType=CHAR},
      remark = #{remark,jdbcType=VARCHAR},
      createDate = #{createDate,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=VARCHAR}
  </update>


    <resultMap id="VoResultMap" extends="BaseResultMap" type="com.huacainfo.ace.partyschool.vo.AttRecordVo">
        <result column="userName" jdbcType="VARCHAR" property="userName"/>
        <result column="userTypeName" jdbcType="VARCHAR" property="userTypeName"/>
        <result column="userTypeName" jdbcType="VARCHAR" property="userTypeName"/>
        <result column="attDate" jdbcType="VARCHAR" property="attDate"/>
    </resultMap>

    <sql id="Vo_Column_List">
        IFNULL(left(t.attTime,10), #{condition.nowDate,jdbcType=VARCHAR} ) as attDate,
        t.attTime, IFNULL(t.attState,'NO_SIGN') as attState,
        v.userId, v.userName, v.userType, v.clsId, v.clsName,
        case
        when v.userType= 'student' then '学员'
        when v.userType= 'teacher' then '教职工'
        ELSE '' end userTypeName
    </sql>
    <sql id="From_Statement">
        from (
                SELECT
                t.id as userId, 'student' as userType, t.`name` as userName,
                c.id as clsId, c.`name` as clsName
                from student t , classes c
                where c.id = t.classId
                and t.`status` = '1'
                UNION ALL
                select
                    t.id as userId, 'teacher' as userType, t.`name` as userName,
                    '' as clsId, '' as clsName
                from teacher t
                where t.`status` = '1'
        )v
        LEFT JOIN (
            select
              a.userId, a.userType, a.attTime, a.attState
            from att_record a
            where a.attTime  >= str_to_date( #{condition.startDate} , '%Y-%m-%d %H:%i:%S')
            AND a.attTime <![CDATA[<=]]> str_to_date( #{condition.endDate} , '%Y-%m-%d %H:%i:%S')
        )t ON v.userId = t.userId
    </sql>
    <sql id="Where_Condition">
        where 1 = 1
        <if test="condition.userId !=null and condition.userId !=&quot;&quot;">
            and v.userId = #{condition.userId,jdbcType=VARCHAR}
        </if>
        <if test="condition.userType !=null and condition.userType !=&quot;&quot;">
            and v.userType = #{condition.userType,jdbcType=VARCHAR}
        </if>
        <if test="condition.name !=null and condition.name !=&quot;&quot;">
            and v.userName like concat(#{condition.name,jdbcType=VARCHAR},'%')
        </if>
        <if test="condition.clsId!=null and condition.clsId!=&quot;&quot;">
            and v.clsId = #{condition.clsId,jdbcType=VARCHAR}
        </if>
        <if test="condition.dateTimeStr !=null and condition.dateTimeStr !=&quot;&quot;">
            and date_format(t.attTime, '%Y-%m-%d') like concat(#{condition.dateTimeStr,jdbcType=VARCHAR},'%')
        </if>
    </sql>

    <select id="selectVoByPrimaryKey" parameterType="java.lang.String" resultMap="VoResultMap">
        select
        <include refid="Vo_Column_List"/>
        <include refid="From_Statement"/>
        where v.userId = #{id,jdbcType=VARCHAR}
    </select>

    <select id="findList" parameterType="java.lang.String" resultMap="VoResultMap">
        select
        <include refid="Vo_Column_List"/>
        <include refid="From_Statement"/>
        <include refid="Where_Condition"/>
        <choose>
            <when test="orderBy!=null and orderBy!=&quot;&quot;">
                ORDER BY ${orderBy}
            </when>
            <otherwise>
                ORDER BY t.attTime desc, v.userType, v.userName
            </otherwise>
        </choose>
        limit #{start,jdbcType=DECIMAL}, #{limit,jdbcType=DECIMAL}
    </select>

    <select id="findCount" resultType="int">
        SELECT COUNT(*)
        <include refid="From_Statement"/>
        <include refid="Where_Condition"/>
    </select>

    <select id="isExist" resultType="int" parameterType="com.huacainfo.ace.partyschool.model.AttRecord">
        select count(1)
        from att_record t
        where t.attTime like concat(#{attTimeStr,jdbcType=VARCHAR},'%')
        and t.userId = #{userId,jdbcType=VARCHAR}
    </select>


    <select id="getAttSrc" parameterType="java.lang.String" resultType="map">
       select
        t.config_key,t.config_value,t.config_name,t.remark
       from portal.config t
       where t.syid='partyschool'
        and t.config_key='att_src'
    </select>

    <select id="findConfigList" parameterType="java.lang.String" resultType="map">
       select
        t.config_key,t.config_value,t.config_name,t.remark
       from portal.config t
       where t.syid= #{sysId,jdbcType=VARCHAR}
        and t.config_key like concat(#{key,jdbcType=VARCHAR},'%')
    </select>

    <select id="findRecordList" parameterType="java.lang.String" resultMap="VoResultMap">
        select
        IFNULL(left(t.attTime,10), '') as attDate,
        t.attTime, IFNULL(t.attState,'NO_SIGN') as attState,
        v.userId, v.userName, v.userType, v.clsId, v.clsName,
        case
        when v.userType= 'student' then '学员'
        when v.userType= 'teacher' then '教职工'
        ELSE '' end userTypeName
        from (
        SELECT
        t.id as userId, 'student' as userType, t.`name` as userName,
        c.id as clsId, c.`name` as clsName
        from student t , classes c
        where c.id = t.classId
        and t.`status` = '1'
        UNION ALL
        select
        t.id as userId, 'teacher' as userType, t.`name` as userName,
        '' as clsId, '' as clsName
        from teacher t
        where t.`status` = '1'
        )v
        LEFT JOIN att_record t ON v.userId = t.userId
        <include refid="Where_Condition"/>
        <if test="condition.startDate !=null and condition.startDate !=&quot;&quot;">
            and t.attTime >= str_to_date( #{condition.startDate} , '%Y-%m-%d %H:%i:%S')
        </if>
        <if test="condition.endDate !=null and condition.endDate !=&quot;&quot;">
            and t.attTime <![CDATA[<=]]> str_to_date( #{condition.endDate} , '%Y-%m-%d %H:%i:%S')
        </if>
        ORDER BY t.attTime desc, v.userType, v.userName
        limit #{start,jdbcType=DECIMAL}, #{limit,jdbcType=DECIMAL}
    </select>

    <select id="findAllTeacherList" parameterType="java.lang.String" resultType="map">
        SELECT
            @rank:=@rank + 1 AS sort, a.*
        FROM (
            select
                t.id, t.`name`, d.`name` as unitName
            from teacher t
            left join portal.dict d on d.category_id='156' and d.`code` = t.workUnitName
            where t.`status`= '1'
            order by t.sort
        ) a, (SELECT @rank:= 0) b
    </select>

    <select id="findOneDayDate" parameterType="java.lang.String" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from att_record
        where userId = #{userId,jdbcType=VARCHAR}
        and attTime BETWEEN #{startTime,jdbcType=VARCHAR} and #{endTime,jdbcType=VARCHAR}
        order by attTime asc
    </select>

    <select id="findStudetnList" parameterType="java.lang.String" resultType="map">
        SELECT
            @rank:=@rank + 1 AS sort, a.*
        FROM (

            select
                t.`name` as studentName,c.`name` as clasName
            from student t
            left join classes c on t.classId = c.id
            where t.classId = #{classId,jdbcType=VARCHAR}
            and t.`status` = '1'
            order by t.`name`

        ) a, (SELECT @rank:= 0) b
    </select>
</mapper>
